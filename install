# This script installs dotfiles from git repository.
#!/usr/bin/env sh

# Define a config ----------------------------------------------------------------------------------

ROOT="$HOME/dotfiles" # where to clone dotfiles repository
BACKUP="$ROOT.old"    # backup directory for old dotfiles
REPO="https://github.com/akrisanov/dotfiles.git"

# Check if $HOME is set ----------------------------------------------------------------------------

if [ -z "${HOME+xxx}" ]; then
  echo "‚ùå Error: \$HOME variable is not set. Exiting..."
  exit 1
fi

# Check if git is installed ------------------------------------------------------------------------

if ! command -v git >/dev/null 2>&1; then
  echo "‚ùå Error: git is not installed. Exiting..."
  exit 1
fi

# Clone or pull dotfiles repository ----------------------------------------------------------------

if [ -d "$ROOT" ]; then
  # The dotfiles repository is already cloned, pull changes
  DONE_MSG="‚úîÔ∏è Dotfiles were updated successfully"

  echo "üì¶ Updating dotfiles..."
  cd "$ROOT"
  git pull
  git submodule update --recursive
else
  DONE_MSG="‚úîÔ∏è Dotfiles were installed successfully"

  echo "üì¶ No dotfiles found, cloning from '$REPO'..."
  git clone --recursive "$REPO" "$ROOT"
  if [ ! $? -eq 0 ]; then
    echo "‚ùå Error: Something went wrong while cloning dotfiles repository. Exiting..."
    exit 1
  fi
  cd "$ROOT"
fi

# Create symlinks in $HOME directory ---------------------------------------------------------------

for f in "$ROOT"/dots/*; do
  t="$HOME/.$(basename "$f")"

  if [ -L "$t" ]; then
    # break if symlink already points to the file
    if [ "$(readlink "$t")" = "$f"  ]; then
      continue
    fi
  fi

  # backup file if it exists to $BACKUP directory
  if [ -e "$t" ]; then
    if [ ! -d "$BACKUP" ]; then
      mkdir "$BACKUP"
      if [ $? -eq 0 ]; then
        echo "üóÉÔ∏è Created backup directory at '$BACKUP'"
      else
        echo "‚ùå Error: Could not create backup directory at '$BACKUP'. Exiting..."
        exit 1
      fi
    fi

    b="$BACKUP/$(basename "$t")"
    n=0
    while [ 1 ]; do
      b1="$b.$n"
      [ -f "$b1" ] || break
      n=$(expr $n + 1)
    done
    b="$b1"

    mv "$t" "$b"
    if [ $? -eq 0 ]; then
      ln -s "$f" "$t"
    else
      echo "‚ÄºÔ∏è Warning: Could not move '$t' to the backup directory. Skipping..."
    fi
  else
    ln -s "$f" "$t"
  fi
done

echo $DONE_MSG
